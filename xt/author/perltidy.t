use 5.010;
use strictures 2;

=head1 DESCRIPTION

This test checks all perl files for tidyness, applying the local .perltidyrc rules. It is also set
up to use a cache file generated by our in-dev version of  Dist::Zilla::App::Command::perltidy. Said
cache file normally lives in ~/.perltidychk.

=cut

use Test::More;
use Test::PerlTidy;
use Dist::Zilla::Path;
use YAML;
use Digest::SHA 'sha1_base64';
use File::HomeDir;

run();

sub run {
	my %args = (
		exclude => [
			".build/", "_build/", "blib", ".git", ".vscode",    #
			qr@^[A-Za-z].*-[0-9._]+(-TRIAL)?/@
		],
		perltidyrc => ".perltidyrc",
	);
	my @files = Test::PerlTidy::list_files(%args);

	my %seen;
	my $seen_file = path( File::HomeDir->my_home, ".perltidychk" );
	%seen = %{ Load $seen_file->slurp_raw } if $seen_file->exists;
	my @to_skip = grep $seen{"./$_"}{ sha1_base64 path($_)->slurp_raw }, @files;
	return pass "all files tidy", done_testing if @files == @to_skip;

	push @{ $args{exclude} }, @to_skip;
	@files = Test::PerlTidy::list_files(%args);

	my @ok_files =
	  grep ok( Test::PerlTidy::is_file_tidy( $_, $args{perltidyrc} ), "'$_'" ),
	  @files;
	$seen{"./$_"}{ sha1_base64 path($_)->slurp_raw } = 1 for @ok_files;
	$seen_file->spew( Dump \%seen );

	done_testing;

	return;
}
